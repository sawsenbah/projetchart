/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ProgChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionsParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunctionsParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProgChart returns ProgChart:
		//    'Start' '{' functions+=Functions ( ";" functions+=Functions)* '}' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Start' '{' functions+=Functions ( ";" functions+=Functions)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//functions+=Functions
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Functions
		public RuleCall getFunctionsFunctionsParserRuleCall_2_0() { return cFunctionsFunctionsParserRuleCall_2_0; }
		
		//( ";" functions+=Functions)*
		public Group getGroup_3() { return cGroup_3; }
		
		//";"
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//functions+=Functions
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }
		
		//Functions
		public RuleCall getFunctionsFunctionsParserRuleCall_3_1_0() { return cFunctionsFunctionsParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Functions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplyFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateChartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCsvLoaderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectedColumnsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Functions returns Functions:
		//    ApplyFilter | CreateChart | CsvLoader |SelectedColumns;
		@Override public ParserRule getRule() { return rule; }
		
		//ApplyFilter | CreateChart | CsvLoader |SelectedColumns
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ApplyFilter
		public RuleCall getApplyFilterParserRuleCall_0() { return cApplyFilterParserRuleCall_0; }
		
		//CreateChart
		public RuleCall getCreateChartParserRuleCall_1() { return cCreateChartParserRuleCall_1; }
		
		//CsvLoader
		public RuleCall getCsvLoaderParserRuleCall_2() { return cCsvLoaderParserRuleCall_2; }
		
		//SelectedColumns
		public RuleCall getSelectedColumnsParserRuleCall_3() { return cSelectedColumnsParserRuleCall_3; }
	}
	public class ApplyFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ApplyFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFilterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnameEStringParserRuleCall_3_0 = (RuleCall)cColumnameAssignment_3.eContents().get(0);
		private final Assignment cFilterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilterFilterTypeEnumRuleCall_4_0 = (RuleCall)cFilterAssignment_4.eContents().get(0);
		private final Assignment cFiltervalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFiltervalueEStringParserRuleCall_5_0 = (RuleCall)cFiltervalueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFilteredoutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFilteredoutputEStringParserRuleCall_7_0 = (RuleCall)cFilteredoutputAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ApplyFilter returns ApplyFilter:
		//    {ApplyFilter}
		//    'ApplyFilter'
		//    '('
		//        ( columname=EString)?
		//        ( filter=FilterType)?
		//        ( filtervalue=EString)? ","
		//        ( filteredoutput=EString )?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyFilter}
		//'ApplyFilter'
		//'('
		//    ( columname=EString)?
		//    ( filter=FilterType)?
		//    ( filtervalue=EString)? ","
		//    ( filteredoutput=EString )?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{ApplyFilter}
		public Action getApplyFilterAction_0() { return cApplyFilterAction_0; }
		
		//'ApplyFilter'
		public Keyword getApplyFilterKeyword_1() { return cApplyFilterKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//( columname=EString)?
		public Assignment getColumnameAssignment_3() { return cColumnameAssignment_3; }
		
		//EString
		public RuleCall getColumnameEStringParserRuleCall_3_0() { return cColumnameEStringParserRuleCall_3_0; }
		
		//( filter=FilterType)?
		public Assignment getFilterAssignment_4() { return cFilterAssignment_4; }
		
		//FilterType
		public RuleCall getFilterFilterTypeEnumRuleCall_4_0() { return cFilterFilterTypeEnumRuleCall_4_0; }
		
		//( filtervalue=EString)?
		public Assignment getFiltervalueAssignment_5() { return cFiltervalueAssignment_5; }
		
		//EString
		public RuleCall getFiltervalueEStringParserRuleCall_5_0() { return cFiltervalueEStringParserRuleCall_5_0; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//( filteredoutput=EString )?
		public Assignment getFilteredoutputAssignment_7() { return cFilteredoutputAssignment_7; }
		
		//EString
		public RuleCall getFilteredoutputEStringParserRuleCall_7_0() { return cFilteredoutputEStringParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CreateChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CreateChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateChartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCreateChartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChartKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChartChartTypeEnumRuleCall_3_1_0 = (RuleCall)cChartAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTitlechartAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTitlechartEStringParserRuleCall_6_0 = (RuleCall)cTitlechartAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cXlabelKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cXlabelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cXlabelEStringParserRuleCall_9_0 = (RuleCall)cXlabelAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cYlabelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cYlabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cYlabelEStringParserRuleCall_12_0 = (RuleCall)cYlabelAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//CreateChart returns CreateChart:
		//    {CreateChart}
		//    'CreateChart' "("('chart' chart=ChartType) "," 'title : '( titlechart=EString) ","    'xlabel : '( xlabel=EString) ","    'ylabel : '(  ylabel+=EString)* ")"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateChart}
		//'CreateChart' "("('chart' chart=ChartType) "," 'title : '( titlechart=EString) ","    'xlabel : '( xlabel=EString) ","    'ylabel : '(  ylabel+=EString)* ")"?
		public Group getGroup() { return cGroup; }
		
		//{CreateChart}
		public Action getCreateChartAction_0() { return cCreateChartAction_0; }
		
		//'CreateChart'
		public Keyword getCreateChartKeyword_1() { return cCreateChartKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('chart' chart=ChartType)
		public Group getGroup_3() { return cGroup_3; }
		
		//'chart'
		public Keyword getChartKeyword_3_0() { return cChartKeyword_3_0; }
		
		//chart=ChartType
		public Assignment getChartAssignment_3_1() { return cChartAssignment_3_1; }
		
		//ChartType
		public RuleCall getChartChartTypeEnumRuleCall_3_1_0() { return cChartChartTypeEnumRuleCall_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'title : '
		public Keyword getTitleKeyword_5() { return cTitleKeyword_5; }
		
		//( titlechart=EString)
		public Assignment getTitlechartAssignment_6() { return cTitlechartAssignment_6; }
		
		//EString
		public RuleCall getTitlechartEStringParserRuleCall_6_0() { return cTitlechartEStringParserRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'xlabel : '
		public Keyword getXlabelKeyword_8() { return cXlabelKeyword_8; }
		
		//( xlabel=EString)
		public Assignment getXlabelAssignment_9() { return cXlabelAssignment_9; }
		
		//EString
		public RuleCall getXlabelEStringParserRuleCall_9_0() { return cXlabelEStringParserRuleCall_9_0; }
		
		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//'ylabel : '
		public Keyword getYlabelKeyword_11() { return cYlabelKeyword_11; }
		
		//(  ylabel+=EString)*
		public Assignment getYlabelAssignment_12() { return cYlabelAssignment_12; }
		
		//EString
		public RuleCall getYlabelEStringParserRuleCall_12_0() { return cYlabelEStringParserRuleCall_12_0; }
		
		//")"?
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class SelectedColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SelectedColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectedColumnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsnameEStringParserRuleCall_2_0 = (RuleCall)cColumnsnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsnameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsnameEStringParserRuleCall_3_1_0 = (RuleCall)cColumnsnameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cOutputpathKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cOutputpathAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cOutputpathEStringParserRuleCall_4_3_0 = (RuleCall)cOutputpathAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectedColumns returns SelectedColumns:
		//'SelectedColumns' '(' columnsname+=EString (',' columnsname+=EString)*  (',' 'outputpath' '=' outputpath=EString)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SelectedColumns' '(' columnsname+=EString (',' columnsname+=EString)*  (',' 'outputpath' '=' outputpath=EString)? ')'
		public Group getGroup() { return cGroup; }
		
		//'SelectedColumns'
		public Keyword getSelectedColumnsKeyword_0() { return cSelectedColumnsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//columnsname+=EString
		public Assignment getColumnsnameAssignment_2() { return cColumnsnameAssignment_2; }
		
		//EString
		public RuleCall getColumnsnameEStringParserRuleCall_2_0() { return cColumnsnameEStringParserRuleCall_2_0; }
		
		//(',' columnsname+=EString)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columnsname+=EString
		public Assignment getColumnsnameAssignment_3_1() { return cColumnsnameAssignment_3_1; }
		
		//EString
		public RuleCall getColumnsnameEStringParserRuleCall_3_1_0() { return cColumnsnameEStringParserRuleCall_3_1_0; }
		
		//(',' 'outputpath' '=' outputpath=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'outputpath'
		public Keyword getOutputpathKeyword_4_1() { return cOutputpathKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//outputpath=EString
		public Assignment getOutputpathAssignment_4_3() { return cOutputpathAssignment_4_3; }
		
		//EString
		public RuleCall getOutputpathEStringParserRuleCall_4_3_0() { return cOutputpathEStringParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CsvLoaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CsvLoader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCsvLoaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCsvLoaderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPathKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cPathAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPathEStringParserRuleCall_3_2_0 = (RuleCall)cPathAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CsvLoader returns CsvLoader:
		//    {CsvLoader}
		//    'CsvLoader''('('path' '=' path=EString) ')'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CsvLoader}
		//'CsvLoader''('('path' '=' path=EString) ')'?
		public Group getGroup() { return cGroup; }
		
		//{CsvLoader}
		public Action getCsvLoaderAction_0() { return cCsvLoaderAction_0; }
		
		//'CsvLoader'
		public Keyword getCsvLoaderKeyword_1() { return cCsvLoaderKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('path' '=' path=EString)
		public Group getGroup_3() { return cGroup_3; }
		
		//'path'
		public Keyword getPathKeyword_3_0() { return cPathKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//path=EString
		public Assignment getPathAssignment_3_2() { return cPathAssignment_3_2; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_3_2_0() { return cPathEStringParserRuleCall_3_2_0; }
		
		//')'?
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cCUsersDELLDownloadsSelected_carsCsvKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EString returns ecore::EString:
		//    STRING | ID| 'C:/Users/DELL/Downloads/selected_cars.csv';
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID| 'C:/Users/DELL/Downloads/selected_cars.csv'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'C:/Users/DELL/Downloads/selected_cars.csv'
		public Keyword getCUsersDELLDownloadsSelected_carsCsvKeyword_2() { return cCUsersDELLDownloadsSelected_carsCsvKeyword_2; }
	}
	
	public class FilterTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FilterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfInfKeyword_0_0 = (Keyword)cInfEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupSupKeyword_1_0 = (Keyword)cSupEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FilterType returns FilterType:
		//                inf = 'inf' | sup = 'sup' | equal = 'equal';
		public EnumRule getRule() { return rule; }
		
		//inf = 'inf' | sup = 'sup' | equal = 'equal'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inf = 'inf'
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_0() { return cInfEnumLiteralDeclaration_0; }
		
		//'inf'
		public Keyword getInfInfKeyword_0_0() { return cInfInfKeyword_0_0; }
		
		//sup = 'sup'
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_1() { return cSupEnumLiteralDeclaration_1; }
		
		//'sup'
		public Keyword getSupSupKeyword_1_0() { return cSupSupKeyword_1_0; }
		
		//equal = 'equal'
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_2_0() { return cEqualEqualKeyword_2_0; }
	}
	public class ChartTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChartType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHistogramEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHistogramHistogramKeyword_0_0 = (Keyword)cHistogramEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPiePieKeyword_1_0 = (Keyword)cPieEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLineLineKeyword_2_0 = (Keyword)cLineEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ChartType returns ChartType:
		//                histogram = 'histogram' | pie = 'pie' | line = 'line';
		public EnumRule getRule() { return rule; }
		
		//histogram = 'histogram' | pie = 'pie' | line = 'line'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//histogram = 'histogram'
		public EnumLiteralDeclaration getHistogramEnumLiteralDeclaration_0() { return cHistogramEnumLiteralDeclaration_0; }
		
		//'histogram'
		public Keyword getHistogramHistogramKeyword_0_0() { return cHistogramHistogramKeyword_0_0; }
		
		//pie = 'pie'
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration_1() { return cPieEnumLiteralDeclaration_1; }
		
		//'pie'
		public Keyword getPiePieKeyword_1_0() { return cPiePieKeyword_1_0; }
		
		//line = 'line'
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_2() { return cLineEnumLiteralDeclaration_2; }
		
		//'line'
		public Keyword getLineLineKeyword_2_0() { return cLineLineKeyword_2_0; }
	}
	
	private final ProgChartElements pProgChart;
	private final FunctionsElements pFunctions;
	private final ApplyFilterElements pApplyFilter;
	private final CreateChartElements pCreateChart;
	private final SelectedColumnsElements pSelectedColumns;
	private final CsvLoaderElements pCsvLoader;
	private final EStringElements pEString;
	private final FilterTypeElements eFilterType;
	private final ChartTypeElements eChartType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgChart = new ProgChartElements();
		this.pFunctions = new FunctionsElements();
		this.pApplyFilter = new ApplyFilterElements();
		this.pCreateChart = new CreateChartElements();
		this.pSelectedColumns = new SelectedColumnsElements();
		this.pCsvLoader = new CsvLoaderElements();
		this.pEString = new EStringElements();
		this.eFilterType = new FilterTypeElements();
		this.eChartType = new ChartTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProgChart returns ProgChart:
	//    'Start' '{' functions+=Functions ( ";" functions+=Functions)* '}' ;
	public ProgChartElements getProgChartAccess() {
		return pProgChart;
	}
	
	public ParserRule getProgChartRule() {
		return getProgChartAccess().getRule();
	}
	
	//Functions returns Functions:
	//    ApplyFilter | CreateChart | CsvLoader |SelectedColumns;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	//ApplyFilter returns ApplyFilter:
	//    {ApplyFilter}
	//    'ApplyFilter'
	//    '('
	//        ( columname=EString)?
	//        ( filter=FilterType)?
	//        ( filtervalue=EString)? ","
	//        ( filteredoutput=EString )?
	//    ')';
	public ApplyFilterElements getApplyFilterAccess() {
		return pApplyFilter;
	}
	
	public ParserRule getApplyFilterRule() {
		return getApplyFilterAccess().getRule();
	}
	
	//CreateChart returns CreateChart:
	//    {CreateChart}
	//    'CreateChart' "("('chart' chart=ChartType) "," 'title : '( titlechart=EString) ","    'xlabel : '( xlabel=EString) ","    'ylabel : '(  ylabel+=EString)* ")"?;
	public CreateChartElements getCreateChartAccess() {
		return pCreateChart;
	}
	
	public ParserRule getCreateChartRule() {
		return getCreateChartAccess().getRule();
	}
	
	//SelectedColumns returns SelectedColumns:
	//'SelectedColumns' '(' columnsname+=EString (',' columnsname+=EString)*  (',' 'outputpath' '=' outputpath=EString)? ')';
	public SelectedColumnsElements getSelectedColumnsAccess() {
		return pSelectedColumns;
	}
	
	public ParserRule getSelectedColumnsRule() {
		return getSelectedColumnsAccess().getRule();
	}
	
	//CsvLoader returns CsvLoader:
	//    {CsvLoader}
	//    'CsvLoader''('('path' '=' path=EString) ')'?;
	public CsvLoaderElements getCsvLoaderAccess() {
		return pCsvLoader;
	}
	
	public ParserRule getCsvLoaderRule() {
		return getCsvLoaderAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID| 'C:/Users/DELL/Downloads/selected_cars.csv';
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum FilterType returns FilterType:
	//                inf = 'inf' | sup = 'sup' | equal = 'equal';
	public FilterTypeElements getFilterTypeAccess() {
		return eFilterType;
	}
	
	public EnumRule getFilterTypeRule() {
		return getFilterTypeAccess().getRule();
	}
	
	//enum ChartType returns ChartType:
	//                histogram = 'histogram' | pie = 'pie' | line = 'line';
	public ChartTypeElements getChartTypeAccess() {
		return eChartType;
	}
	
	public EnumRule getChartTypeRule() {
		return getChartTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
