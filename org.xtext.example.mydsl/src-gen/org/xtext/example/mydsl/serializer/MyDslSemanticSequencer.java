/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import programChartSawsen.ApplyFilter;
import programChartSawsen.CreateChart;
import programChartSawsen.CsvLoader;
import programChartSawsen.ProgChart;
import programChartSawsen.ProgramChartSawsenPackage;
import programChartSawsen.SelectedColumns;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProgramChartSawsenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProgramChartSawsenPackage.APPLY_FILTER:
				sequence_ApplyFilter(context, (ApplyFilter) semanticObject); 
				return; 
			case ProgramChartSawsenPackage.CREATE_CHART:
				sequence_CreateChart(context, (CreateChart) semanticObject); 
				return; 
			case ProgramChartSawsenPackage.CSV_LOADER:
				sequence_CsvLoader(context, (CsvLoader) semanticObject); 
				return; 
			case ProgramChartSawsenPackage.PROG_CHART:
				sequence_ProgChart(context, (ProgChart) semanticObject); 
				return; 
			case ProgramChartSawsenPackage.SELECTED_COLUMNS:
				sequence_SelectedColumns(context, (SelectedColumns) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Functions returns ApplyFilter
	 *     ApplyFilter returns ApplyFilter
	 *
	 * Constraint:
	 *     (columname=EString? filter=FilterType? filtervalue=EString? filteredoutput=EString?)
	 */
	protected void sequence_ApplyFilter(ISerializationContext context, ApplyFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functions returns CreateChart
	 *     CreateChart returns CreateChart
	 *
	 * Constraint:
	 *     (chart=ChartType titlechart=EString xlabel=EString ylabel+=EString*)
	 */
	protected void sequence_CreateChart(ISerializationContext context, CreateChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functions returns CsvLoader
	 *     CsvLoader returns CsvLoader
	 *
	 * Constraint:
	 *     path=EString
	 */
	protected void sequence_CsvLoader(ISerializationContext context, CsvLoader semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProgramChartSawsenPackage.Literals.CSV_LOADER__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProgramChartSawsenPackage.Literals.CSV_LOADER__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCsvLoaderAccess().getPathEStringParserRuleCall_3_2_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProgChart returns ProgChart
	 *
	 * Constraint:
	 *     (functions+=Functions functions+=Functions*)
	 */
	protected void sequence_ProgChart(ISerializationContext context, ProgChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functions returns SelectedColumns
	 *     SelectedColumns returns SelectedColumns
	 *
	 * Constraint:
	 *     (columnsname+=EString columnsname+=EString* outputpath=EString?)
	 */
	protected void sequence_SelectedColumns(ISerializationContext context, SelectedColumns semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
