/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ProgChart";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgChart
entryRuleProgChart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgChartRule()); }
	iv_ruleProgChart=ruleProgChart
	{ $current=$iv_ruleProgChart.current; }
	EOF;

// Rule ProgChart
ruleProgChart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Start'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgChartAccess().getStartKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgChartAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgChartAccess().getFunctionsFunctionsParserRuleCall_2_0());
				}
				lv_functions_2_0=ruleFunctions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgChartRule());
					}
					add(
						$current,
						"functions",
						lv_functions_2_0,
						"org.xtext.example.mydsl.MyDsl.Functions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getProgChartAccess().getSemicolonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgChartAccess().getFunctionsFunctionsParserRuleCall_3_1_0());
					}
					lv_functions_4_0=ruleFunctions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgChartRule());
						}
						add(
							$current,
							"functions",
							lv_functions_4_0,
							"org.xtext.example.mydsl.MyDsl.Functions");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgChartAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctions
entryRuleFunctions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionsRule()); }
	iv_ruleFunctions=ruleFunctions
	{ $current=$iv_ruleFunctions.current; }
	EOF;

// Rule Functions
ruleFunctions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionsAccess().getApplyFilterParserRuleCall_0());
		}
		this_ApplyFilter_0=ruleApplyFilter
		{
			$current = $this_ApplyFilter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionsAccess().getCreateChartParserRuleCall_1());
		}
		this_CreateChart_1=ruleCreateChart
		{
			$current = $this_CreateChart_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionsAccess().getCsvLoaderParserRuleCall_2());
		}
		this_CsvLoader_2=ruleCsvLoader
		{
			$current = $this_CsvLoader_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionsAccess().getSelectedColumnsParserRuleCall_3());
		}
		this_SelectedColumns_3=ruleSelectedColumns
		{
			$current = $this_SelectedColumns_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleApplyFilter
entryRuleApplyFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getApplyFilterRule()); }
	iv_ruleApplyFilter=ruleApplyFilter
	{ $current=$iv_ruleApplyFilter.current; }
	EOF;

// Rule ApplyFilter
ruleApplyFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getApplyFilterAccess().getApplyFilterAction_0(),
					$current);
			}
		)
		otherlv_1='ApplyFilter'
		{
			newLeafNode(otherlv_1, grammarAccess.getApplyFilterAccess().getApplyFilterKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getApplyFilterAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getApplyFilterAccess().getColumnameEStringParserRuleCall_3_0());
				}
				lv_columname_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplyFilterRule());
					}
					set(
						$current,
						"columname",
						lv_columname_3_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getApplyFilterAccess().getFilterFilterTypeEnumRuleCall_4_0());
				}
				lv_filter_4_0=ruleFilterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplyFilterRule());
					}
					set(
						$current,
						"filter",
						lv_filter_4_0,
						"org.xtext.example.mydsl.MyDsl.FilterType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getApplyFilterAccess().getFiltervalueEStringParserRuleCall_5_0());
				}
				lv_filtervalue_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplyFilterRule());
					}
					set(
						$current,
						"filtervalue",
						lv_filtervalue_5_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getApplyFilterAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getApplyFilterAccess().getFilteredoutputEStringParserRuleCall_7_0());
				}
				lv_filteredoutput_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplyFilterRule());
					}
					set(
						$current,
						"filteredoutput",
						lv_filteredoutput_7_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getApplyFilterAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleCreateChart
entryRuleCreateChart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateChartRule()); }
	iv_ruleCreateChart=ruleCreateChart
	{ $current=$iv_ruleCreateChart.current; }
	EOF;

// Rule CreateChart
ruleCreateChart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCreateChartAccess().getCreateChartAction_0(),
					$current);
			}
		)
		otherlv_1='CreateChart'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateChartAccess().getCreateChartKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateChartAccess().getLeftParenthesisKeyword_2());
		}
		(
			otherlv_3='chart'
			{
				newLeafNode(otherlv_3, grammarAccess.getCreateChartAccess().getChartKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateChartAccess().getChartChartTypeEnumRuleCall_3_1_0());
					}
					lv_chart_4_0=ruleChartType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateChartRule());
						}
						set(
							$current,
							"chart",
							lv_chart_4_0,
							"org.xtext.example.mydsl.MyDsl.ChartType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getCreateChartAccess().getCommaKeyword_4());
		}
		otherlv_6='title : '
		{
			newLeafNode(otherlv_6, grammarAccess.getCreateChartAccess().getTitleKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateChartAccess().getTitlechartEStringParserRuleCall_6_0());
				}
				lv_titlechart_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateChartRule());
					}
					set(
						$current,
						"titlechart",
						lv_titlechart_7_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getCreateChartAccess().getCommaKeyword_7());
		}
		otherlv_9='xlabel : '
		{
			newLeafNode(otherlv_9, grammarAccess.getCreateChartAccess().getXlabelKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateChartAccess().getXlabelEStringParserRuleCall_9_0());
				}
				lv_xlabel_10_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateChartRule());
					}
					set(
						$current,
						"xlabel",
						lv_xlabel_10_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=','
		{
			newLeafNode(otherlv_11, grammarAccess.getCreateChartAccess().getCommaKeyword_10());
		}
		otherlv_12='ylabel : '
		{
			newLeafNode(otherlv_12, grammarAccess.getCreateChartAccess().getYlabelKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateChartAccess().getYlabelEStringParserRuleCall_12_0());
				}
				lv_ylabel_13_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateChartRule());
					}
					add(
						$current,
						"ylabel",
						lv_ylabel_13_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getCreateChartAccess().getRightParenthesisKeyword_13());
			}
		)?
	)
;

// Entry rule entryRuleSelectedColumns
entryRuleSelectedColumns returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectedColumnsRule()); }
	iv_ruleSelectedColumns=ruleSelectedColumns
	{ $current=$iv_ruleSelectedColumns.current; }
	EOF;

// Rule SelectedColumns
ruleSelectedColumns returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SelectedColumns'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectedColumnsAccess().getSelectedColumnsKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectedColumnsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectedColumnsAccess().getColumnsnameEStringParserRuleCall_2_0());
				}
				lv_columnsname_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectedColumnsRule());
					}
					add(
						$current,
						"columnsname",
						lv_columnsname_2_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSelectedColumnsAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectedColumnsAccess().getColumnsnameEStringParserRuleCall_3_1_0());
					}
					lv_columnsname_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectedColumnsRule());
						}
						add(
							$current,
							"columnsname",
							lv_columnsname_4_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectedColumnsAccess().getCommaKeyword_4_0());
			}
			otherlv_6='outputpath'
			{
				newLeafNode(otherlv_6, grammarAccess.getSelectedColumnsAccess().getOutputpathKeyword_4_1());
			}
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getSelectedColumnsAccess().getEqualsSignKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectedColumnsAccess().getOutputpathEStringParserRuleCall_4_3_0());
					}
					lv_outputpath_8_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectedColumnsRule());
						}
						set(
							$current,
							"outputpath",
							lv_outputpath_8_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getSelectedColumnsAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCsvLoader
entryRuleCsvLoader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvLoaderRule()); }
	iv_ruleCsvLoader=ruleCsvLoader
	{ $current=$iv_ruleCsvLoader.current; }
	EOF;

// Rule CsvLoader
ruleCsvLoader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCsvLoaderAccess().getCsvLoaderAction_0(),
					$current);
			}
		)
		otherlv_1='CsvLoader'
		{
			newLeafNode(otherlv_1, grammarAccess.getCsvLoaderAccess().getCsvLoaderKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCsvLoaderAccess().getLeftParenthesisKeyword_2());
		}
		(
			otherlv_3='path'
			{
				newLeafNode(otherlv_3, grammarAccess.getCsvLoaderAccess().getPathKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getCsvLoaderAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCsvLoaderAccess().getPathEStringParserRuleCall_3_2_0());
					}
					lv_path_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCsvLoaderRule());
						}
						set(
							$current,
							"path",
							lv_path_5_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getCsvLoaderAccess().getRightParenthesisKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
		    |
		kw='C:/Users/DELL/Downloads/selected_cars.csv'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getCUsersDELLDownloadsSelected_carsCsvKeyword_2());
		}
	)
;

// Rule FilterType
ruleFilterType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='inf'
			{
				$current = grammarAccess.getFilterTypeAccess().getInfEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFilterTypeAccess().getInfEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='sup'
			{
				$current = grammarAccess.getFilterTypeAccess().getSupEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFilterTypeAccess().getSupEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='equal'
			{
				$current = grammarAccess.getFilterTypeAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFilterTypeAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ChartType
ruleChartType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='histogram'
			{
				$current = grammarAccess.getChartTypeAccess().getHistogramEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getChartTypeAccess().getHistogramEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='pie'
			{
				$current = grammarAccess.getChartTypeAccess().getPieEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getChartTypeAccess().getPieEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='line'
			{
				$current = grammarAccess.getChartTypeAccess().getLineEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getChartTypeAccess().getLineEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
