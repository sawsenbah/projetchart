// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/programChartSawsen" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ProgChart returns ProgChart:
	'Start' '{' functions+=Functions ( ";" functions+=Functions)* '}' ;

Functions returns Functions:
	ApplyFilter | CreateChart | CsvLoader |SelectedColumns;

ApplyFilter returns ApplyFilter:
	{ApplyFilter}
	'ApplyFilter'
	'('
		( columname=EString)?
		( filter=FilterType)?
		( filtervalue=EString)? ","
    	( filteredoutput=EString )?
	')';

CreateChart returns CreateChart:
	{CreateChart}
	'CreateChart' "("('chart' chart=ChartType) "," 'title : '( titlechart=EString) ","	'xlabel : '( xlabel=EString) ","	'ylabel : '(  ylabel+=EString)* ")"?;
SelectedColumns returns SelectedColumns:
'SelectedColumns' '(' columnsname+=EString (',' columnsname+=EString)*  (',' 'outputpath' '=' outputpath=EString)? ')';

CsvLoader returns CsvLoader:
	{CsvLoader}
	'CsvLoader''('('path' '=' path=EString) ')'?;

EString returns ecore::EString:
	STRING | ID| 'C:/Users/DELL/Downloads/selected_cars.csv';

enum FilterType returns FilterType:
				inf = 'inf' | sup = 'sup' | equal = 'equal';

enum ChartType returns ChartType:
				histogram = 'histogram' | pie = 'pie' | line = 'line';
