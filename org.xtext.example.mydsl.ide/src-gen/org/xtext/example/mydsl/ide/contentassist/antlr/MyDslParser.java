/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFunctionsAccess().getAlternatives(), "rule__Functions__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getFilterTypeAccess().getAlternatives(), "rule__FilterType__Alternatives");
			builder.put(grammarAccess.getChartTypeAccess().getAlternatives(), "rule__ChartType__Alternatives");
			builder.put(grammarAccess.getProgChartAccess().getGroup(), "rule__ProgChart__Group__0");
			builder.put(grammarAccess.getProgChartAccess().getGroup_3(), "rule__ProgChart__Group_3__0");
			builder.put(grammarAccess.getApplyFilterAccess().getGroup(), "rule__ApplyFilter__Group__0");
			builder.put(grammarAccess.getCreateChartAccess().getGroup(), "rule__CreateChart__Group__0");
			builder.put(grammarAccess.getCreateChartAccess().getGroup_3(), "rule__CreateChart__Group_3__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup(), "rule__SelectedColumns__Group__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup_3(), "rule__SelectedColumns__Group_3__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup_4(), "rule__SelectedColumns__Group_4__0");
			builder.put(grammarAccess.getCsvLoaderAccess().getGroup(), "rule__CsvLoader__Group__0");
			builder.put(grammarAccess.getCsvLoaderAccess().getGroup_3(), "rule__CsvLoader__Group_3__0");
			builder.put(grammarAccess.getProgChartAccess().getFunctionsAssignment_2(), "rule__ProgChart__FunctionsAssignment_2");
			builder.put(grammarAccess.getProgChartAccess().getFunctionsAssignment_3_1(), "rule__ProgChart__FunctionsAssignment_3_1");
			builder.put(grammarAccess.getApplyFilterAccess().getColumnameAssignment_3(), "rule__ApplyFilter__ColumnameAssignment_3");
			builder.put(grammarAccess.getApplyFilterAccess().getFilterAssignment_4(), "rule__ApplyFilter__FilterAssignment_4");
			builder.put(grammarAccess.getApplyFilterAccess().getFiltervalueAssignment_5(), "rule__ApplyFilter__FiltervalueAssignment_5");
			builder.put(grammarAccess.getApplyFilterAccess().getFilteredoutputAssignment_7(), "rule__ApplyFilter__FilteredoutputAssignment_7");
			builder.put(grammarAccess.getCreateChartAccess().getChartAssignment_3_1(), "rule__CreateChart__ChartAssignment_3_1");
			builder.put(grammarAccess.getCreateChartAccess().getTitlechartAssignment_6(), "rule__CreateChart__TitlechartAssignment_6");
			builder.put(grammarAccess.getCreateChartAccess().getXlabelAssignment_9(), "rule__CreateChart__XlabelAssignment_9");
			builder.put(grammarAccess.getCreateChartAccess().getYlabelAssignment_12(), "rule__CreateChart__YlabelAssignment_12");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsnameAssignment_2(), "rule__SelectedColumns__ColumnsnameAssignment_2");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsnameAssignment_3_1(), "rule__SelectedColumns__ColumnsnameAssignment_3_1");
			builder.put(grammarAccess.getSelectedColumnsAccess().getOutputpathAssignment_4_3(), "rule__SelectedColumns__OutputpathAssignment_4_3");
			builder.put(grammarAccess.getCsvLoaderAccess().getPathAssignment_3_2(), "rule__CsvLoader__PathAssignment_3_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
